{"version":3,"sources":["icx/icon.svg","icx/mock.js","icx/sdk_utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","provider","HttpProvider","MockData","iconService","IconService","getDefaultStepCost","a","CallBuilder","IconBuilder","getScoreApi","execute","governanceApi","console","log","getStepCostsApi","getMethod","getStepCostsApiInputs","inputs","length","JSON","stringify","getStepCostsApiOutputs","outputs","callBuilder","call","to","method","build","stepCosts","default","getMaxStepLimit","getMaxStepLimitApi","params","name","maxStepLimit","IconConverter","toBigNumber","getStepPrice","stepPrice","App","useState","stepCost","setStepCost","setMaxStepLimit","setStepPrice","useEffect","then","className","src","logo","alt","Typography","variant","Divider","List","ListItem","ListItemText","primary","parseInt","secondary","Link","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,4RCkC5B,EA3BY,6CA2BZ,EAzBE,0CCFXC,EAAW,IAAIC,eAAaC,GAG5BC,EAAc,IAAIC,IAAYJ,GAEvBK,EAAkB,uCAAG,0CAAAC,EAAA,6DACxBC,EAAgBC,cAAhBD,YADwB,SAIJJ,EACzBM,YAAYP,GACZQ,UAN6B,cAI1BC,EAJ0B,OAOhCC,QAAQC,IAAIF,GACO,eAEbG,EAAkBH,EAAcI,UAFnB,gBAGbC,EACJF,EAAgBG,OAAOC,OAAS,EAC5BC,KAAKC,UAAUN,EAAgBG,QAC/B,OACAI,EACJP,EAAgBQ,QAAQJ,OAAS,EAC7BC,KAAKC,UAAUN,EAAgBQ,SAC/B,OACNV,QAAQC,IAAR,mCAC8BG,EAD9B,wBACmEK,IAI7DE,EAAc,IAAIhB,EAClBiB,EAAOD,EACVE,GAAGvB,GACHwB,OAnBgB,gBAoBhBC,QA5B6B,UA6BRxB,EAAYqB,KAAKA,GAAMd,UA7Bf,eA6B1BkB,EA7B0B,yBA8BzBA,EAAUC,SA9Be,4CAAH,qDAiClBC,EAAe,uCAAG,wCAAAxB,EAAA,6DACrBC,EAAgBC,cAAhBD,YADqB,SAGDJ,EACzBM,YAAYP,GACZQ,UAL0B,cAGvBC,EAHuB,OAOV,kBAEboB,EAAqBpB,EAAcI,UAFtB,oBAIbiB,EAAS,IACRD,EAAmBd,OAAO,GAAGgB,MAAQ,SAGtCV,EAAc,IAAIhB,EAClBiB,EAAOD,EACVE,GAAGvB,GACHwB,OAXgB,mBAYhBM,OAAOA,GACPL,QApB0B,UAqBFxB,EAAYqB,KAAKA,GAAMd,UArBrB,eAqBvBwB,EArBuB,yBAsBtBC,gBAAcC,YAAYF,IAtBJ,4CAAH,qDAyBfG,EAAY,uCAAG,kCAAA/B,EAAA,6DAClBC,EAAgBC,cAAhBD,YAEW,eAEbgB,EAAc,IAAIhB,EAClBiB,EAAOD,EACVE,GAAGvB,GACHwB,OALgB,gBAMhBC,QATuB,SAUFxB,EAAYqB,KAAKA,GAAMd,UAVrB,cAUpB4B,EAVoB,yBAWnBH,gBAAcC,YAAYE,IAXP,2CAAH,qDCiHVC,G,MArKH,WAAO,IAAD,EACgBC,qBADhB,mBACTC,EADS,KACCC,EADD,OAEwBF,qBAFxB,mBAETN,EAFS,KAEKS,EAFL,OAGkBH,qBAHlB,mBAGTF,EAHS,KAGEM,EAHF,KAoBhB,OAfAC,qBAAU,WACRxC,IAAqByC,MAAK,SAACL,GACzB7B,QAAQC,IAAI,kBAAmB4B,GAC/BC,EAAYD,MAEdX,IAAkBgB,MAAK,SAACZ,GACtBtB,QAAQC,IAAI,sBAAuBqB,GACnCS,EAAgBT,MAElBG,IAAeS,MAAK,SAACR,GACnB1B,QAAQC,IAAI,mBAAoByB,GAChCM,EAAaN,QAEd,IAGD,6BACE,0BAAMS,UAAU,cACd,yBAAKA,UAAU,WAAWC,IAAKC,IAAMC,IAAI,YACzC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,yBAEF,0BAAML,UAAU,kBACd,kBAACI,EAAA,EAAD,CAAYC,QAAQ,MAApB,qBACoB,0CADpB,MAC4C,6CAG9C,kBAACC,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAU,cAAnC,gBAIF,kBAACQ,EAAA,EAAD,UACI,sCADJ,uEAIA,kBAACA,EAAA,EAAD,UACI,0CADJ,oEAEmB,0CAFnB,iBAGE,0CAHF,kDAKA,kBAACA,EAAA,EAAD,UACI,2CADJ,+FAIA,kBAACA,EAAA,EAAD,UACI,2CADJ,mFAIA,kBAACA,EAAA,EAAD,UACI,8CADJ,kHAIA,kBAACA,EAAA,EAAD,wBACkB,sCADlB,6FAIA,kBAACA,EAAA,EAAD,aACO,0CADP,gBACyC,2CADzC,uGAIE,2CAJF,mCAMA,kBAACA,EAAA,EAAD,4EAEE,2CAFF,MAE2B,2CAF3B,+FAOF,kBAACF,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAU,cAAnC,iBAIF,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAAO,6BAAwBC,SAASjB,EAAU,IAA3C,kCACHiB,SAASjB,EAAU,IAAnB,SAAyB,GAAM,GAD5B,QAEPkB,UAAU,uBAGd,kBAACJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAAO,wBAAmBvB,EAAnB,kCACHA,EAAY,SAAG,GAAM,GADlB,QAEPyB,UAAU,uBAGd,kBAACJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAAO,qBAAgBnB,EAAhB,kCACHA,EAAS,SAAG,GAAM,GADf,iCAEHA,EAAS,SAAG,GAAM,IAFf,QAGPqB,UAAU,8CAKhB,kBAACN,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAU,cAAnC,cAIF,kBAACQ,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CACEC,KAAK,gDACLC,OAAO,SACPC,IAAI,YAHN,gDAQF,kBAACR,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CACEC,KAAK,sEACLC,OAAO,SACPC,IAAI,YAHN,4CAQF,kBAACR,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CACEC,KAAK,gFACLC,OAAO,SACPC,IAAI,YAHN,oCAQF,kBAACR,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CACEC,KAAK,mCACLC,OAAO,SACPC,IAAI,YAHN,iBAQF,kBAACR,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CACEC,KAAK,iEACLC,OAAO,SACPC,IAAI,YAHN,yCC/JUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.92ad5032.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.d7235b30.svg\";","const WALLET_ADDRESS_1 = \"hx902ecb51c109183ace539f247b4ea1347fbf23b5\";\nconst PRIVATE_KEY_1 =\n  \"38f792b95a5202ab431bfc799f7e1e5c74ec0b9ede5c6142ee7364f2c84d72f6\";\nconst WALLET_ADDRESS_2 = \"hxd008c05cbc0e689f04a5bb729a66b42377a9a497\";\nconst PRIVATE_KEY_2 =\n  \"7c739961afd3df0c36d4560037540d8e4ebb4e4584f9e5284789ade976897a4c\";\nconst TOKEN_ADDRESS = \"cx4ae65c058d35b5bb8cef668be5113354448c0264\";\nconst GOVERNANCE_ADDRESS = \"cx0000000000000000000000000000000000000001\";\nconst SCORE_INSTALL_ADDRESS = \"cx0000000000000000000000000000000000000000\";\nconst NODE_URL = \"https://bicon.net.solidwallet.io/api/v3\";\nconst KEYSTORE_FILE = {\n  version: 3,\n  id: \"e00e113c-1e45-47e4-b732-10f3d1903d75\",\n  address: \"hx7d3d4c743bb82b927ea8a0551a3b9288e722ac84\",\n  crypto: {\n    ciphertext:\n      \"d5df37230528bbfc0015e93c61e60041a31fb63266f61ffec60a31f474d4d7d0\",\n    cipherparams: {\n      iv: \"feaf0cc19678e4b78369904a99ba411e\",\n    },\n    cipher: \"aes-128-ctr\",\n    kdf: \"scrypt\",\n    kdfparams: {\n      dklen: 32,\n      salt: \"e2e3666919161044f7b369d6ad4296380d4a13b9b5e844301c64a502ea3da240\",\n      n: 16384,\n      r: 8,\n      p: 1,\n    },\n    mac: \"43789e78de4744d06c14cf966b9609fadbcd815b5380caf3f778797f9824d9d7\",\n  },\n};\nconst PASSWORD = \"qwer1234!\";\n\nexport default {\n  WALLET_ADDRESS_1,\n  PRIVATE_KEY_1,\n  WALLET_ADDRESS_2,\n  PRIVATE_KEY_2,\n  TOKEN_ADDRESS,\n  GOVERNANCE_ADDRESS,\n  SCORE_INSTALL_ADDRESS,\n  NODE_URL,\n  KEYSTORE_FILE,\n  PASSWORD,\n};\n","import IconService, {\n  IconConverter,\n  HttpProvider,\n  IconBuilder,\n} from \"icon-sdk-js\";\nimport MockData from \"./mock\";\n\nconst provider = new HttpProvider(MockData.NODE_URL);\n\n// Create IconService instance\nconst iconService = new IconService(provider);\n\nexport const getDefaultStepCost = async () => {\n  const { CallBuilder } = IconBuilder;\n\n  // Get governance score api list\n  const governanceApi = await iconService\n    .getScoreApi(MockData.GOVERNANCE_ADDRESS)\n    .execute();\n  console.log(governanceApi);\n  const methodName = \"getStepCosts\";\n  // Check input and output parameters of api if you need\n  const getStepCostsApi = governanceApi.getMethod(methodName);\n  const getStepCostsApiInputs =\n    getStepCostsApi.inputs.length > 0\n      ? JSON.stringify(getStepCostsApi.inputs)\n      : \"none\";\n  const getStepCostsApiOutputs =\n    getStepCostsApi.outputs.length > 0\n      ? JSON.stringify(getStepCostsApi.outputs)\n      : \"none\";\n  console.log(\n    `[getStepCosts]\\n inputs: ${getStepCostsApiInputs} \\n outputs: ${getStepCostsApiOutputs}`\n  );\n\n  // Get step costs by iconService.call\n  const callBuilder = new CallBuilder();\n  const call = callBuilder\n    .to(MockData.GOVERNANCE_ADDRESS)\n    .method(methodName)\n    .build();\n  const stepCosts = await iconService.call(call).execute();\n  return stepCosts.default;\n};\n\nexport const getMaxStepLimit = async () => {\n  const { CallBuilder } = IconBuilder;\n\n  const governanceApi = await iconService\n    .getScoreApi(MockData.GOVERNANCE_ADDRESS)\n    .execute();\n  // \"getMaxStepLimit\" : the maximum step limit value that any SCORE execution should be bounded by.\n  const methodName = \"getMaxStepLimit\";\n  // Check input and output parameters of api if you need\n  const getMaxStepLimitApi = governanceApi.getMethod(methodName);\n\n  const params = {};\n  params[getMaxStepLimitApi.inputs[0].name] = \"invoke\";\n\n  // Get max step limit by iconService.call\n  const callBuilder = new CallBuilder();\n  const call = callBuilder\n    .to(MockData.GOVERNANCE_ADDRESS)\n    .method(methodName)\n    .params(params)\n    .build();\n  const maxStepLimit = await iconService.call(call).execute();\n  return IconConverter.toBigNumber(maxStepLimit);\n};\n\nexport const getStepPrice = async () => {\n  const { CallBuilder } = IconBuilder;\n\n  const methodName = \"getStepPrice\";\n\n  const callBuilder = new CallBuilder();\n  const call = callBuilder\n    .to(MockData.GOVERNANCE_ADDRESS)\n    .method(methodName)\n    .build();\n  const stepPrice = await iconService.call(call).execute();\n  return IconConverter.toBigNumber(stepPrice);\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  List,\n  ListItem,\n  Divider,\n  Typography,\n  ListItemText,\n  Link,\n} from \"@material-ui/core\";\nimport \"fontsource-roboto\";\nimport logo from \"./icx/icon.svg\";\nimport {\n  getDefaultStepCost,\n  getMaxStepLimit,\n  getStepPrice,\n} from \"./icx/sdk_utils\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [stepCost, setStepCost] = useState();\n  const [maxStepLimit, setMaxStepLimit] = useState();\n  const [stepPrice, setStepPrice] = useState();\n\n  useEffect(() => {\n    getDefaultStepCost().then((stepCost) => {\n      console.log(\"App -> stepCost\", stepCost);\n      setStepCost(stepCost);\n    });\n    getMaxStepLimit().then((maxStepLimit) => {\n      console.log(\"App -> maxStepLimit\", maxStepLimit);\n      setMaxStepLimit(maxStepLimit);\n    });\n    getStepPrice().then((stepPrice) => {\n      console.log(\"App -> stepPrice\", stepPrice);\n      setStepPrice(stepPrice);\n    });\n  }, []);\n\n  return (\n    <div>\n      <span className=\"App-header\">\n        <img className=\"App-logo\" src={logo} alt=\"ic_icon\" />\n        <Typography variant=\"h2\">ICON Transaction Fee</Typography>\n      </span>\n      <span className=\"App-sub-header\">\n        <Typography variant=\"h6\">\n          Transaction fee = <code>usedStep</code> * <code>stepPrice</code>\n        </Typography>\n      </span>\n      <Divider />\n\n      <List>\n        <ListItem>\n          <Typography variant=\"h4\" className=\"list-title\">\n            Instruction\n          </Typography>\n        </ListItem>\n        <ListItem>\n          - <code>step</code>: The unit of measurement for transaction fees on\n          the ICON network.\n        </ListItem>\n        <ListItem>\n          - <code>usedStep</code>: This is the actual amount of step consumed by\n          the transaction. <code>usedStep</code> is the sum of\n          <code>stepCost</code> for each action processed in the transaction.\n        </ListItem>\n        <ListItem>\n          - <code>stepPrice</code>: The price of a step. This can be fluctuating\n          when the ICX price goes too high or too low.\n        </ListItem>\n        <ListItem>\n          - <code>stepLimit</code>: This is determined by the sender to limit\n          the maximum steps that can be used.\n        </ListItem>\n        <ListItem>\n          - <code>maxStepLimit</code>: This is the maximum limit that can be\n          used for a single transaction. For now, it’s 2,500,000,000 steps.\n        </ListItem>\n        <ListItem>\n          - The amount of <code>step</code> required is measured by the\n          computational resources required to execute the transaction.\n        </ListItem>\n        <ListItem>\n          - If <code>usedStep</code> reaches the <code>stepLimit</code> before\n          finishing the execution, the transaction will fail with out of step\n          error, but the amount of\n          <code>stepLimit</code> is deducted from your balance.\n        </ListItem>\n        <ListItem>\n          - Before executing your transaction, your account must hold at least\n          <code>stepLimit</code> * <code>stepPrice</code> amount of ICX. If you\n          do not have sufficient ICX, your transaction will fail immediately.\n        </ListItem>\n      </List>\n\n      <Divider />\n      <List>\n        <ListItem>\n          <Typography variant=\"h4\" className=\"list-title\">\n            Query Result\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemText\n            primary={`stepCost(default): ${parseInt(stepCost, 16)} steps \n            = ${parseInt(stepCost, 16) / 10 ** 8} ICX`}\n            secondary=\"1 ICX = 10^8 Step\"\n          />\n        </ListItem>\n        <ListItem>\n          <ListItemText\n            primary={`maxStepLimit: ${maxStepLimit} steps \n            = ${maxStepLimit / 10 ** 8} ICX`}\n            secondary=\"1 ICX = 10^8 Step\"\n          />\n        </ListItem>\n        <ListItem>\n          <ListItemText\n            primary={`stepPrice: ${stepPrice} loops \n            = ${stepPrice / 10 ** 9} Gloop\n            = ${stepPrice / 10 ** 18} ICX`}\n            secondary=\"1 ICX = 10^9 Gloop, 1 Gloop = 10^9 loop\"\n          />\n        </ListItem>\n      </List>\n\n      <Divider />\n\n      <List>\n        <ListItem>\n          <Typography variant=\"h4\" className=\"list-title\">\n            Reference\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Link\n            href=\"https://icon-project.github.io/docs/step.html\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            ICON GitHub documentation - Transaction Fee\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link\n            href=\"https://www.icondev.io/docs/transaction-fees#transaction-fee-policy\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            ICON DEVPORTAL - Transaction Fee Policy\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link\n            href=\"https://github.com/icon-project/governance/blob/master/README.md#methods-list\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Governance SCORE APIs - Methods\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link\n            href=\"https://tracker.icon.foundation/\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            ICON Tracker\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link\n            href=\"https://www.rapidtables.com/convert/number/hex-to-decimal.html\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Hexadecimal to Decimal converter\n          </Link>\n        </ListItem>\n      </List>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}